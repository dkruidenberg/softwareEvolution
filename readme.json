[
{"name":"/src/smallsql/database/Columns.java", "imports":["/src/smallsql/database/Columns.java","/src/smallsql/database/ForeignKeys.java","/src/smallsql/database/IndexDescriptions.java","/src/smallsql/database/Strings.java"], "source": ["/src/smallsql/database/Columns.java<54,62>","/src/smallsql/database/ForeignKeys.java<51,60>","/src/smallsql/database/IndexDescriptions.java<57,67>","/src/smallsql/database/Strings.java<51,60>"], "code": ["return size;{  return size; }final int size(){  return size; }int idxthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);if (idx >= size)   throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);"]},
{"name":"/src/smallsql/database/Command.java", "imports":["/src/smallsql/database/Command.java","/src/smallsql/database/CommandSelect.java","/src/smallsql/database/CommandSelect.java","/src/smallsql/database/CommandSelect.java"], "source": ["/src/smallsql/database/Command.java<138,143>","/src/smallsql/database/CommandSelect.java<436,441>","/src/smallsql/database/CommandSelect.java<478,483>","/src/smallsql/database/CommandSelect.java<494,499>"], "code": ["Throwable econ.rollback(savepoint);throw SmallSQLException.createFromException(e);{            con.rollback(savepoint);            throw SmallSQLException.createFromException(e);        }catch(Throwable e){            con.rollback(savepoint);            throw SmallSQLException.createFromException(e);        }con.commit();"]},
{"name":"/src/smallsql/database/DataSources.java", "imports":["/src/smallsql/database/DataSources.java","/src/smallsql/database/LongList.java"], "source": ["/src/smallsql/database/DataSources.java<44,52>","/src/smallsql/database/LongList.java<55,64>"], "code": ["return size;{  return size; }final int size(){  return size; }int idxthrow new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);if (idx >= size)   throw new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);"]},
{"name":"/src/smallsql/database/Database.java", "imports":["/src/smallsql/database/Database.java","/src/smallsql/database/Database.java"], "source": ["/src/smallsql/database/Database.java<444,455>","/src/smallsql/database/Database.java<480,491>"], "code": ["SSConnection conString tableList rows = new ArrayList();Strings tables = getTables(table);String tableName = tables.get(t);TableView tab = getTableView( con, tableName);"]},
{"name":"/src/smallsql/database/DateTime.java", "imports":["/src/smallsql/database/DateTime.java","/src/smallsql/database/DateTime.java"], "source": ["/src/smallsql/database/DateTime.java<527,532>","/src/smallsql/database/DateTime.java<598,603>"], "code": ["String tableName = tables.get(t);TableView tab = getTableView( con, tableName);continue;if(!(tab instanceof Table)) continue;IndexDescriptions indexes = ((Table)tab).indexes;IndexDescription index = indexes.get(i);"]},
{"name":"/src/smallsql/database/DateTime.java", "imports":["/src/smallsql/database/DateTime.java","/src/smallsql/database/DateTime.java"], "source": ["/src/smallsql/database/DateTime.java<532,540>","/src/smallsql/database/DateTime.java<619,627>"], "code": ["buf.append( SHORT_MONTHS[ details.month ]);buf.append(' ');formatNumber( details.day,   2, buf );buf.append(' ');formatNumber( details.year,  4, buf );buf.append(' ');"]},
{"name":"/src/smallsql/database/Distinct.java", "imports":["/src/smallsql/database/Distinct.java","/src/smallsql/database/Where.java"], "source": ["/src/smallsql/database/Distinct.java<107,136>","/src/smallsql/database/Where.java<144,173>"], "code": ["formatNumber( details.hour,  2, buf );buf.append(':');formatNumber( details.minute, 2, buf );buf.append(':');formatNumber( details.second, 2, buf );return buf.toString();"]},
{"name":"/src/smallsql/database/ExpressionArithmetic.java", "imports":["/src/smallsql/database/ExpressionArithmetic.java","/src/smallsql/database/ExpressionArithmetic.java"], "source": ["/src/smallsql/database/ExpressionArithmetic.java<190,195>","/src/smallsql/database/ExpressionArithmetic.java<234,239>"], "code": ["buf.append( SHORT_MONTHS[ details.month ]);buf.append(' ');formatNumber( details.day,   2, buf );buf.append(' ');formatNumber( details.year,  4, buf );buf.append(' ');"]},
{"name":"/src/smallsql/database/ExpressionArithmetic.java", "imports":["/src/smallsql/database/ExpressionArithmetic.java","/src/smallsql/database/ExpressionArithmetic.java"], "source": ["/src/smallsql/database/ExpressionArithmetic.java<262,281>","/src/smallsql/database/ExpressionArithmetic.java<309,328>"], "code": ["formatNumber( details.day,   2, buf );buf.append(' ');buf.append( SHORT_MONTHS[ details.month ]);buf.append(' ');formatNumber( details.year,  4, buf );buf.append(' ');"]},
{"name":"/src/smallsql/database/ExpressionArithmetic.java", "imports":["/src/smallsql/database/ExpressionArithmetic.java","/src/smallsql/database/ExpressionFunctionReturnP1.java"], "source": ["/src/smallsql/database/ExpressionArithmetic.java<475,506>","/src/smallsql/database/ExpressionFunctionReturnP1.java<49,80>"], "code": ["buf.append(' ');formatNumber( details.hour,  2, buf );buf.append(':');formatNumber( details.minute, 2, buf );buf.append(':');formatNumber( details.second, 2, buf );"]},
{"name":"/src/smallsql/database/ExpressionArithmetic.java", "imports":["/src/smallsql/database/ExpressionArithmetic.java","/src/smallsql/database/ExpressionFunctionReturnP1.java"], "source": ["/src/smallsql/database/ExpressionArithmetic.java<516,525>","/src/smallsql/database/ExpressionFunctionReturnP1.java<82,91>"], "code": ["formatNumber( details.hour,  2, buf );buf.append(':');formatNumber( details.minute, 2, buf );buf.append(':');formatNumber( details.second, 2, buf );buf.append(':');"]},
{"name":"/src/smallsql/database/ExpressionArithmetic.java", "imports":["/src/smallsql/database/ExpressionArithmetic.java","/src/smallsql/database/ExpressionArithmetic.java","/src/smallsql/database/ExpressionArithmetic.java"], "source": ["/src/smallsql/database/ExpressionArithmetic.java<657,665>","/src/smallsql/database/ExpressionArithmetic.java<682,690>","/src/smallsql/database/ExpressionArithmetic.java<704,712>"], "code": ["formatNumber( details.year,  4, buf );buf.append('-');formatNumber( details.month + 1, 2, buf );buf.append('-');formatNumber( details.day,   2, buf );buf.append(' ');"]},
{"name":"/src/smallsql/database/ExpressionArithmetic.java", "imports":["/src/smallsql/database/ExpressionArithmetic.java","/src/smallsql/database/ExpressionArithmetic.java"], "source": ["/src/smallsql/database/ExpressionArithmetic.java<748,753>","/src/smallsql/database/ExpressionArithmetic.java<786,791>"], "code": ["formatNumber( details.year,  4, buf );buf.append('-');formatNumber( details.month + 1, 2, buf );buf.append('-');formatNumber( details.day,   2, buf );buf.append(' ');"]},
{"name":"/src/smallsql/database/ExpressionFunctionAbs.java", "imports":["/src/smallsql/database/ExpressionFunctionAbs.java","/src/smallsql/database/ExpressionFunctionFloor.java","/src/smallsql/database/ExpressionFunctionReturnFloat.java"], "source": ["/src/smallsql/database/ExpressionFunctionAbs.java<104,108>","/src/smallsql/database/ExpressionFunctionFloor.java<46,50>","/src/smallsql/database/ExpressionFunctionReturnFloat.java<76,80>"], "code": ["formatNumber( details.hour,  2, buf );buf.append(':');formatNumber( details.minute, 2, buf );buf.append(':');formatNumber( details.second, 2, buf );buf.append('.');"]},
{"name":"/src/smallsql/database/ExpressionFunctionBitLen.java", "imports":["/src/smallsql/database/ExpressionFunctionBitLen.java","/src/smallsql/database/ExpressionFunctionCharLen.java","/src/smallsql/database/ExpressionFunctionOctetLen.java"], "source": ["/src/smallsql/database/ExpressionFunctionBitLen.java<52,60>","/src/smallsql/database/ExpressionFunctionCharLen.java<48,56>","/src/smallsql/database/ExpressionFunctionOctetLen.java<52,60>"], "code": ["buf.append(' ');formatNumber( details.year,  4, buf );buf.append(' ');formatHour12( details.hour, buf );buf.append(':');formatNumber( details.minute, 2, buf );"]},
{"name":"/src/smallsql/database/ExpressionFunctionConvert.java", "imports":["/src/smallsql/database/ExpressionFunctionConvert.java","/src/smallsql/database/ExpressionFunctionConvert.java"], "source": ["/src/smallsql/database/ExpressionFunctionConvert.java<140,146>","/src/smallsql/database/ExpressionFunctionConvert.java<151,157>"], "code": ["return rowSource.getRowPosition();{  return rowSource.getRowPosition(); }final long getRowPosition() {  return rowSource.getRowPosition(); }long rowPositionrowSource.setRowPosition(rowPosition);{  rowSource.setRowPosition(rowPosition); }"]},
{"name":"/src/smallsql/database/ExpressionFunctionLCase.java", "imports":["/src/smallsql/database/ExpressionFunctionLCase.java","/src/smallsql/database/ExpressionFunctionUCase.java"], "source": ["/src/smallsql/database/ExpressionFunctionLCase.java<47,59>","/src/smallsql/database/ExpressionFunctionUCase.java<47,59>"], "code": ["return 0;if(isNull()) return 0;int dataType = getDataType();case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return getBoolean() ? 1 : 0;"]},
{"name":"/src/smallsql/database/ExpressionFunctionLTrim.java", "imports":["/src/smallsql/database/ExpressionFunctionLTrim.java","/src/smallsql/database/ExpressionFunctionRTrim.java"], "source": ["/src/smallsql/database/ExpressionFunctionLTrim.java<47,54>","/src/smallsql/database/ExpressionFunctionRTrim.java<47,54>"], "code": ["case SQLTokenizer.FLOAT:case SQLTokenizer.DOUBLE:case SQLTokenizer.MONEY:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:"]},
{"name":"/src/smallsql/database/ExpressionFunctionLeft.java", "imports":["/src/smallsql/database/ExpressionFunctionLeft.java","/src/smallsql/database/ExpressionFunctionRight.java"], "source": ["/src/smallsql/database/ExpressionFunctionLeft.java<47,58>","/src/smallsql/database/ExpressionFunctionRight.java<47,58>"], "code": ["return 0;if(isNull()) return 0;int dataType = getDataType();case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return getBoolean() ? 1 : 0;"]},
{"name":"/src/smallsql/database/ExpressionFunctionReturnInt.java", "imports":["/src/smallsql/database/ExpressionFunctionReturnInt.java","/src/smallsql/database/ExpressionFunctionTimestampDiff.java"], "source": ["/src/smallsql/database/ExpressionFunctionReturnInt.java<55,67>","/src/smallsql/database/ExpressionFunctionTimestampDiff.java<128,140>"], "code": ["return 0;if(isNull()) return 0;int dataType = getDataType();case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return getBoolean() ? 1 : 0;"]},
{"name":"/src/smallsql/database/ExpressionFunctionReturnInt.java", "imports":["/src/smallsql/database/ExpressionFunctionReturnInt.java","/src/smallsql/database/ExpressionFunctionTimestampDiff.java"], "source": ["/src/smallsql/database/ExpressionFunctionReturnInt.java<75,95>","/src/smallsql/database/ExpressionFunctionTimestampDiff.java<148,168>"], "code": ["return null;if(isNull()) return null;int dataType = getDataType();case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:return getBoolean() ? Boolean.TRUE : Boolean.FALSE;"]},
{"name":"/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java", "imports":["/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java","/src/smallsql/database/ExpressionFunctionReturnString.java"], "source": ["/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java<44,83>","/src/smallsql/database/ExpressionFunctionReturnString.java<48,87>"], "code": ["case SQLTokenizer.LONGVARBINARY:return getBytes();case SQLTokenizer.DATE:case SQLTokenizer.TIME:case SQLTokenizer.TIMESTAMP:case SQLTokenizer.SMALLDATETIME:"]},
{"name":"/src/smallsql/database/ExpressionFunctionRound.java", "imports":["/src/smallsql/database/ExpressionFunctionRound.java","/src/smallsql/database/ExpressionFunctionTruncate.java"], "source": ["/src/smallsql/database/ExpressionFunctionRound.java<40,60>","/src/smallsql/database/ExpressionFunctionTruncate.java<40,60>"], "code": ["case IN:case EQUALS_NULL:case EQUALS:return comp == 0;case GREATER:return comp >  0;"]},
{"name":"/src/smallsql/database/ExpressionFunctionRound.java", "imports":["/src/smallsql/database/ExpressionFunctionRound.java","/src/smallsql/database/ExpressionFunctionTruncate.java"], "source": ["/src/smallsql/database/ExpressionFunctionRound.java<62,67>","/src/smallsql/database/ExpressionFunctionTruncate.java<62,67>"], "code": ["case OR:case AND:case NOT:case LIKE:case ISNULL:case ISNOTNULL:"]},
{"name":"/src/smallsql/database/ExpressionValue.java", "imports":["/src/smallsql/database/ExpressionValue.java","/src/smallsql/database/ExpressionValue.java"], "source": ["/src/smallsql/database/ExpressionValue.java<154,163>","/src/smallsql/database/ExpressionValue.java<211,220>"], "code": ["Object obj = getObject();return null;if(obj == null) return null;return obj.toString();{        Object obj = getObject();        if(obj == null) return null;        return obj.toString();    }String getString() throws Exception{        Object obj = getObject();        if(obj == null) return null;        return obj.toString();    }"]},
{"name":"/src/smallsql/database/ExpressionValue.java", "imports":["/src/smallsql/database/ExpressionValue.java","/src/smallsql/database/ExpressionValue.java"], "source": ["/src/smallsql/database/ExpressionValue.java<175,181>","/src/smallsql/database/ExpressionValue.java<232,238>"], "code": ["return param1.isNull();{        return param1.isNull();    }boolean isNull() throws Exception {        return param1.isNull();    }return 0;if(isNull()) return 0;String str = param1.getString();"]},
{"name":"/src/smallsql/database/ExpressionValue.java", "imports":["/src/smallsql/database/ExpressionValue.java","/src/smallsql/database/ExpressionValue.java"], "source": ["/src/smallsql/database/ExpressionValue.java<423,432>","/src/smallsql/database/ExpressionValue.java<458,467>"], "code": ["byte[] bytes = param1.getBytes();int length = datatype.getPrecision();byte[] buffer = new byte[length];System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );return buffer;{     byte[] buffer = new byte[length];     System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );     return buffer;    }"]},
{"name":"/src/smallsql/database/ExpressionValue.java", "imports":["/src/smallsql/database/ExpressionValue.java","/src/smallsql/database/ExpressionValue.java","/src/smallsql/database/ExpressionValue.java"], "source": ["/src/smallsql/database/ExpressionValue.java<471,476>","/src/smallsql/database/ExpressionValue.java<504,509>","/src/smallsql/database/ExpressionValue.java<527,532>"], "code": ["return param1.isNull();{        return param1.isNull();    }boolean isNull() throws Exception {        return param1.isNull();    }return null;if(isNull()) return null;return getString().getBytes();"]},
{"name":"/src/smallsql/database/ExpressionValue.java", "imports":["/src/smallsql/database/ExpressionValue.java","/src/smallsql/database/ExpressionValue.java"], "source": ["/src/smallsql/database/ExpressionValue.java<492,499>","/src/smallsql/database/ExpressionValue.java<517,524>"], "code": ["return param1.isNull();{        return param1.isNull();    }boolean isNull() throws Exception {        return param1.isNull();    }return null;if(isNull()) return null;byte[] bytes = param1.getBytes();"]},
{"name":"/src/smallsql/database/GroupResult.java", "imports":["/src/smallsql/database/GroupResult.java","/src/smallsql/database/GroupResult.java"], "source": ["/src/smallsql/database/GroupResult.java<89,94>","/src/smallsql/database/GroupResult.java<111,116>"], "code": ["return param1.isNull() || param2.isNull();{        return param1.isNull() || param2.isNull();    }boolean isNull() throws Exception{        return param1.isNull() || param2.isNull();    }return null;if(isNull()) return null;byte[] bytes = param1.getBytes();"]},
{"name":"/src/smallsql/database/Identity.java", "imports":["/src/smallsql/database/Identity.java","/src/smallsql/database/MutableLong.java"], "source": ["/src/smallsql/database/Identity.java<106,123>","/src/smallsql/database/MutableLong.java<55,69>"], "code": ["return getInt();{  return getInt(); }final long getLong() throws Exception {  return getInt(); }return getInt();{  return getInt(); }final float getFloat() throws Exception {  return getInt(); }"]},
{"name":"/src/smallsql/database/Index.java", "imports":["/src/smallsql/database/Index.java","/src/smallsql/database/Index.java"], "source": ["/src/smallsql/database/Index.java<175,182>","/src/smallsql/database/Index.java<250,257>"], "code": ["return null;if(isNull()) return null;return new MutableNumeric(getInt());{  if(isNull()) return null;  return new MutableNumeric(getInt()); }final MutableNumeric getNumeric() throws Exception {  if(isNull()) return null;  return new MutableNumeric(getInt()); }return null;"]},
{"name":"/src/smallsql/database/Index.java", "imports":["/src/smallsql/database/Index.java","/src/smallsql/database/Index.java"], "source": ["/src/smallsql/database/Index.java<195,200>","/src/smallsql/database/Index.java<269,274>"], "code": ["return false;if(isNull()) return false;return Utils.string2boolean(getString().trim());{  if(isNull()) return false;  return Utils.string2boolean(getString().trim()); }final boolean getBoolean() throws Exception {  if(isNull()) return false;  return Utils.string2boolean(getString().trim()); }return 0;"]},
{"name":"/src/smallsql/database/Index.java", "imports":["/src/smallsql/database/Index.java","/src/smallsql/database/Index.java"], "source": ["/src/smallsql/database/Index.java<331,338>","/src/smallsql/database/Index.java<385,391>"], "code": ["return param1.isNull() || param2.isNull();{        return param1.isNull() || param2.isNull();    }boolean isNull() throws Exception{        return param1.isNull() || param2.isNull();    }return 0;if(isNull()) return 0;final int places = param2.getInt();"]},
{"name":"/src/smallsql/database/IndexDescription.java", "imports":["/src/smallsql/database/IndexDescription.java","/src/smallsql/database/TableView.java"], "source": ["/src/smallsql/database/IndexDescription.java<173,178>","/src/smallsql/database/TableView.java<85,90>"], "code": ["value /= factor;{   value /= factor;  }value *= factor;{   value *= factor;  }if(places > 0){   value /= factor;  }else{   value *= factor;  }return value;"]},
{"name":"/src/smallsql/database/IndexDescription.java", "imports":["/src/smallsql/database/IndexDescription.java","/src/smallsql/database/TableView.java"], "source": ["/src/smallsql/database/IndexDescription.java<186,194>","/src/smallsql/database/TableView.java<105,113>"], "code": ["dataType = expr.getDataType();initValue( expr );if(expr.isNull())      dataType = expr.getDataType();     else      initValue( expr );{     if(expr.isNull())      dataType = expr.getDataType();     else      initValue( expr );    }case SQLTokenizer.TINYINT:case SQLTokenizer.SMALLINT:"]},
{"name":"/src/smallsql/database/IndexScrollStatus.java", "imports":["/src/smallsql/database/IndexScrollStatus.java","/src/smallsql/database/IndexScrollStatus.java"], "source": ["/src/smallsql/database/IndexScrollStatus.java<89,99>","/src/smallsql/database/IndexScrollStatus.java<120,131>"], "code": ["break;case SQLTokenizer.CHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.LONGVARCHAR:String str = expr.getString();value = str;"]},
{"name":"/src/smallsql/database/Join.java", "imports":["/src/smallsql/database/Join.java","/src/smallsql/database/JoinScroll.java"], "source": ["/src/smallsql/database/Join.java<52,56>","/src/smallsql/database/JoinScroll.java<58,62>"], "code": ["Object objint dataTypereturn 0;if(obj == null) return 0;case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:"]},
{"name":"/src/smallsql/database/LongTreeList.java", "imports":["/src/smallsql/database/LongTreeList.java","/src/smallsql/database/LongTreeList.java"], "source": ["/src/smallsql/database/LongTreeList.java<331,341>","/src/smallsql/database/LongTreeList.java<376,386>"], "code": ["case SQLTokenizer.TIMESTAMP:case SQLTokenizer.TIME:case SQLTokenizer.DATE:case SQLTokenizer.SMALLDATETIME:return ((DateTime)obj).getTimeMillis();default:"]},
{"name":"/src/smallsql/database/MemoryResult.java", "imports":["/src/smallsql/database/MemoryResult.java","/src/smallsql/database/NoFromResult.java"], "source": ["/src/smallsql/database/MemoryResult.java<198,210>","/src/smallsql/database/NoFromResult.java<123,135>"], "code": ["Object objint dataTypereturn 0;if(obj == null) return 0;case SQLTokenizer.BIT:return (obj.equals(Boolean.TRUE)) ? 1 : 0;"]},
{"name":"/src/smallsql/database/MutableDouble.java", "imports":["/src/smallsql/database/MutableDouble.java","/src/smallsql/database/MutableFloat.java"], "source": ["/src/smallsql/database/MutableDouble.java<55,65>","/src/smallsql/database/MutableFloat.java<55,65>"], "code": ["int idx = internalExpressions.indexOf(expr);return idx;if(idx >= 0) return idx;internalExpressions.add(expr);return internalExpressions.size()-1;{   int idx = internalExpressions.indexOf(expr);   if(idx >= 0) return idx;   internalExpressions.add(expr);   return internalExpressions.size()-1;  }"]},
{"name":"/src/smallsql/database/MutableFloat.java", "imports":["/src/smallsql/database/MutableFloat.java","/src/smallsql/database/MutableLong.java"], "source": ["/src/smallsql/database/MutableFloat.java<47,57>","/src/smallsql/database/MutableLong.java<47,57>"], "code": ["return (int)value;{  return (int)value; }@Override    public int intValue() {  return (int)value; }return value;{  return value; }@Override    public long longValue() {  return value; }"]},
{"name":"/src/smallsql/database/MutableNumeric.java", "imports":["/src/smallsql/database/MutableNumeric.java","/src/smallsql/database/MutableNumeric.java"], "source": ["/src/smallsql/database/MutableNumeric.java<166,172>","/src/smallsql/database/MutableNumeric.java<234,240>"], "code": ["break;case SQLTokenizer.BIGINT:case SQLTokenizer.DATE:case SQLTokenizer.TIME:case SQLTokenizer.TIMESTAMP:case SQLTokenizer.SMALLDATETIME:"]},
{"name":"/src/smallsql/database/SQLParser.java", "imports":["/src/smallsql/database/SQLParser.java","/src/smallsql/database/SQLParser.java"], "source": ["/src/smallsql/database/SQLParser.java<352,357>","/src/smallsql/database/SQLParser.java<1932,1937>"], "code": ["break;case SQLTokenizer.VARBINARY:case SQLTokenizer.BINARY:case SQLTokenizer.LONGVARBINARY:case SQLTokenizer.BLOB:case SQLTokenizer.UNIQUEIDENTIFIER:"]},
{"name":"/src/smallsql/database/SQLParser.java", "imports":["/src/smallsql/database/SQLParser.java","/src/smallsql/database/SQLParser.java"], "source": ["/src/smallsql/database/SQLParser.java<839,843>","/src/smallsql/database/SQLParser.java<849,853>"], "code": ["node = node.getChildNode(digit);return null;if(node == null) return null;nodeList.add(node);if(nodeList != null) nodeList.add(node);return node;"]},
{"name":"/src/smallsql/database/SQLToken.java", "imports":["/src/smallsql/database/SQLToken.java","/src/smallsql/database/SQLToken.java"], "source": ["/src/smallsql/database/SQLToken.java<45,48>","/src/smallsql/database/SQLToken.java<54,57>"], "code": ["raFile = Utils.openRaFile( file, database.isReadOnly() );ByteBuffer buffer = ByteBuffer.allocate(8);raFile.read(buffer);buffer.position(0);int magic   = buffer.getInt();int version = buffer.getInt();"]},
{"name":"/src/smallsql/database/SSCallableStatement.java", "imports":["/src/smallsql/database/SSCallableStatement.java","/src/smallsql/database/SSCallableStatement.java"], "source": ["/src/smallsql/database/SSCallableStatement.java<117,125>","/src/smallsql/database/SSCallableStatement.java<135,143>"], "code": ["Throwable eraFile.close();{        raFile.close();    }Exception e2DriverManager.println(e2.toString());{                    DriverManager.println(e2.toString());                }"]},
{"name":"/src/smallsql/database/Scrollable.java", "imports":["/src/smallsql/database/Scrollable.java","/src/smallsql/database/SortedResult.java"], "source": ["/src/smallsql/database/Scrollable.java<117,128>","/src/smallsql/database/SortedResult.java<175,184>"], "code": ["level++;nodeStack.push(        new IndexNodeScrollStatus(  (IndexNode)status.nodeValue,               (expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),               scroll, level));continue;{       level++;       nodeStack.push(        new IndexNodeScrollStatus(  (IndexNode)status.nodeValue,               (expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),               scroll, level));       continue;      }return getReturnValue(status.nodeValue);if(status.nodeValue instanceof IndexNode){       level++;       nodeStack.push(        new IndexNodeScrollStatus(  (IndexNode)status.nodeValue,               (expressions.get(level).getAlias() != SQLTokenizer.DESC_STR),               scroll, level));       continue;      }else       return getReturnValue(status.nodeValue);"]},
{"name":"/src/smallsql/database/Scrollable.java", "imports":["/src/smallsql/database/Scrollable.java","/src/smallsql/database/SortedResult.java"], "source": ["/src/smallsql/database/Scrollable.java<210,221>","/src/smallsql/database/SortedResult.java<271,282>"], "code": ["int typeRowSource leftRowSource rightExpression conditionthis.type   = type;this.condition = condition;"]},
{"name":"/src/smallsql/database/StoreImpl.java", "imports":["/src/smallsql/database/StoreImpl.java","/src/smallsql/database/StoreImpl.java"], "source": ["/src/smallsql/database/StoreImpl.java<672,677>","/src/smallsql/database/StoreImpl.java<1473,1478>"], "code": ["return size;{  return size; }final int size(){  return size; }int idxthrow new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);if (idx >= size)   throw new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);"]},
{"name":"/src/smallsql/database/StoreImpl.java", "imports":["/src/smallsql/database/StoreImpl.java","/src/smallsql/database/StoreImpl.java"], "source": ["/src/smallsql/database/StoreImpl.java<684,707>","/src/smallsql/database/StoreImpl.java<1479,1502>"], "code": ["//there are more entries in this node    result |= (((long)nextEntry) << shift);listEnum.offsetStack[listEnum.stack] = offset;return result;{     listEnum.offsetStack[listEnum.stack] = offset;     return result;    }if(listEnum.stack>=3){     listEnum.offsetStack[listEnum.stack] = offset;     return result;    }listEnum.offsetStack[listEnum.stack] = offset+pointerSize;"]},
{"name":"/src/smallsql/database/StoreImpl.java", "imports":["/src/smallsql/database/StoreImpl.java","/src/smallsql/database/StoreImpl.java","/src/smallsql/database/StoreImpl.java","/src/smallsql/database/StoreImpl.java"], "source": ["/src/smallsql/database/StoreImpl.java<893,901>","/src/smallsql/database/StoreImpl.java<959,967>","/src/smallsql/database/StoreImpl.java<1024,1032>","/src/smallsql/database/StoreImpl.java<1089,1097>"], "code": ["return false;{return false;}final boolean rowInserted(){  return false; }return false;{return false;}final boolean rowDeleted(){  return false; }"]},
{"name":"/src/smallsql/database/StoreImpl.java", "imports":["/src/smallsql/database/StoreImpl.java","/src/smallsql/database/StoreImpl.java","/src/smallsql/database/StoreImpl.java"], "source": ["/src/smallsql/database/StoreImpl.java<1006,1014>","/src/smallsql/database/StoreImpl.java<1071,1079>","/src/smallsql/database/StoreImpl.java<1136,1144>"], "code": ["return (int)value;{  return (int)value; }@Override    public int intValue() {  return (int)value; }return (long)value;{  return (long)value; }public long longValue() {  return (long)value; }"]},
{"name":"/src/smallsql/database/StoreImpl.java", "imports":["/src/smallsql/database/StoreImpl.java","/src/smallsql/database/StoreImpl.java"], "source": ["/src/smallsql/database/StoreImpl.java<1034,1045>","/src/smallsql/database/StoreImpl.java<1099,1110>"], "code": ["return value;{  return value; }@Override    public double doubleValue() {  return value; }return value;{  return value; }@Override    public float floatValue() {  return value; }"]},
{"name":"/src/smallsql/database/StoreImpl.java", "imports":["/src/smallsql/database/StoreImpl.java","/src/smallsql/database/StoreImpl.java"], "source": ["/src/smallsql/database/StoreImpl.java<1212,1217>","/src/smallsql/database/StoreImpl.java<1274,1279>"], "code": ["return value;{  return value; }@Override    public double doubleValue() {  return value; }return value;{  return value; }@Override    public float floatValue() {  return value; }"]},
{"name":"/src/smallsql/database/StoreImpl.java", "imports":["/src/smallsql/database/StoreImpl.java","/src/smallsql/database/StoreImpl.java"], "source": ["/src/smallsql/database/StoreImpl.java<1239,1245>","/src/smallsql/database/StoreImpl.java<1301,1307>"], "code": ["return value;{  return value; }@Override    public long longValue() {  return value; }return String.valueOf(value);{     return String.valueOf(value); }@Override    public String toString(){     return String.valueOf(value); }"]},
{"name":"/src/smallsql/database/StoreImpl.java", "imports":["/src/smallsql/database/StoreImpl.java","/src/smallsql/database/StoreImpl.java"], "source": ["/src/smallsql/database/StoreImpl.java<1304,1316>","/src/smallsql/database/StoreImpl.java<1371,1383>"], "code": ["MutableNumeric numnum.setScale(scale);{   num.setScale(scale);  }setScale(num.scale);{   setScale(num.scale);  }if(num.scale > scale){   setScale(num.scale);  }"]},
{"name":"/src/smallsql/database/StoreNoCurrentRow.java", "imports":["/src/smallsql/database/StoreNoCurrentRow.java","/src/smallsql/database/StoreNull.java"], "source": ["/src/smallsql/database/StoreNoCurrentRow.java<106,115>","/src/smallsql/database/StoreNull.java<115,120>"], "code": ["int maxRows = Integer.parseInt(token.getName(sql));selCmd.setMaxRows(maxRows);{      int maxRows = Integer.parseInt(token.getName(sql));      selCmd.setMaxRows(maxRows);     }NumberFormatException ethrow createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));{      throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));     }"]},
{"name":"/src/smallsql/database/Table.java", "imports":["/src/smallsql/database/Table.java","/src/smallsql/database/Table.java"], "source": ["/src/smallsql/database/Table.java<370,379>","/src/smallsql/database/Table.java<388,397>"], "code": ["value = Integer.parseInt(token.getName(sql) );{      value = Integer.parseInt(token.getName(sql) );     }Exception ethrow createSyntaxError(token, MISSING_NUMBERVALUE );{      throw createSyntaxError(token, MISSING_NUMBERVALUE );     }catch(Exception e){      throw createSyntaxError(token, MISSING_NUMBERVALUE );     }"]},
{"name":"/src/smallsql/database/Utils.java", "imports":["/src/smallsql/database/Utils.java","/src/smallsql/junit/BasicTestCase.java"], "source": ["/src/smallsql/database/Utils.java<205,212>","/src/smallsql/junit/BasicTestCase.java<102,109>"], "code": ["int valueint tokenStartint tokenEndthis.value      = value;this.offset = tokenStart;this.length = tokenEnd-tokenStart;"]},
{"name":"/src/smallsql/database/Utils.java", "imports":["/src/smallsql/database/Utils.java","/src/smallsql/junit/BasicTestCase.java"], "source": ["/src/smallsql/database/Utils.java<317,322>","/src/smallsql/junit/BasicTestCase.java<188,196>"], "code": ["int iExpression expr = getValue(i);wasNull = expr.isNull();return expr.getLong();{            Expression expr = getValue(i);            wasNull = expr.isNull();            return expr.getLong();        }Exception e"]},
{"name":"/src/smallsql/junit/BasicTestCase.java", "imports":["/src/smallsql/junit/BasicTestCase.java","/src/smallsql/junit/BasicTestCase.java"], "source": ["/src/smallsql/junit/BasicTestCase.java<130,134>","/src/smallsql/junit/BasicTestCase.java<143,147>"], "code": ["afterLast();return previous();{  afterLast();  return previous(); }boolean last() throws Exception{  afterLast();  return previous(); }return false;{return false;}"]},
{"name":"/src/smallsql/junit/BenchTest.java", "imports":["/src/smallsql/junit/BenchTest.java","/src/smallsql/junit/BenchTest.java"], "source": ["/src/smallsql/junit/BenchTest.java<119,124>","/src/smallsql/junit/BenchTest.java<178,183>"], "code": ["return rowSource.rowInserted();{  return rowSource.rowInserted(); }final boolean rowInserted(){  return rowSource.rowInserted(); }return rowSource.rowDeleted();{  return rowSource.rowDeleted(); }final boolean rowDeleted() {  return rowSource.rowDeleted(); }"]},
{"name":"/src/smallsql/junit/BenchTest.java", "imports":["/src/smallsql/junit/BenchTest.java","/src/smallsql/junit/BenchTest.java","/src/smallsql/junit/BenchTest.java","/src/smallsql/junit/BenchTest.java","/src/smallsql/junit/BenchTest.java","/src/smallsql/junit/BenchTest.java","/src/smallsql/junit/BenchTest.java","/src/smallsql/junit/BenchTest.java","/src/smallsql/junit/BenchTest.java","/src/smallsql/junit/BenchTest.java","/src/smallsql/junit/BenchTest.java","/src/smallsql/junit/BenchTest.java"], "source": ["/src/smallsql/junit/BenchTest.java<125,130>","/src/smallsql/junit/BenchTest.java<150,155>","/src/smallsql/junit/BenchTest.java<184,189>","/src/smallsql/junit/BenchTest.java<237,242>","/src/smallsql/junit/BenchTest.java<358,363>","/src/smallsql/junit/BenchTest.java<394,399>","/src/smallsql/junit/BenchTest.java<443,448>","/src/smallsql/junit/BenchTest.java<498,503>","/src/smallsql/junit/BenchTest.java<553,558>","/src/smallsql/junit/BenchTest.java<600,605>","/src/smallsql/junit/BenchTest.java<635,640>","/src/smallsql/junit/BenchTest.java<676,681>"], "code": ["rowSource.nullRow();row = 0;{  rowSource.nullRow();  row = 0; }final void nullRow() {  rowSource.nullRow();  row = 0; }rowSource.noRow();row = 0;"]},
{"name":"/src/smallsql/junit/BenchTest.java", "imports":["/src/smallsql/junit/BenchTest.java","/src/smallsql/junit/BenchTest.java"], "source": ["/src/smallsql/junit/BenchTest.java<203,214>","/src/smallsql/junit/BenchTest.java<317,328>"], "code": ["case SQLTokenizer.BIT:case SQLTokenizer.BOOLEAN:case SQLTokenizer.TINYINT:offset++;break;case SQLTokenizer.SMALLINT:"]},
{"name":"/src/smallsql/junit/BenchTest.java", "imports":["/src/smallsql/junit/BenchTest.java","/src/smallsql/junit/BenchTest.java"], "source": ["/src/smallsql/junit/BenchTest.java<618,625>","/src/smallsql/junit/BenchTest.java<655,662>"], "code": ["offset += 2;break;case SQLTokenizer.INT:case SQLTokenizer.REAL:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.TIME:"]},
{"name":"/src/smallsql/junit/BenchTest.java", "imports":["/src/smallsql/junit/BenchTest.java","/src/smallsql/junit/BenchTest.java"], "source": ["/src/smallsql/junit/BenchTest.java<629,634>","/src/smallsql/junit/BenchTest.java<670,675>"], "code": ["int valueOffsetint dataTypethis.offset = valueOffset;return 0;if(readBoolean()) return 0;case SQLTokenizer.BIT:"]},
{"name":"/src/smallsql/junit/TestAlterTable.java", "imports":["/src/smallsql/junit/TestAlterTable.java","/src/smallsql/junit/TestAlterTable2.java"], "source": ["/src/smallsql/junit/TestAlterTable.java<39,50>","/src/smallsql/junit/TestAlterTable2.java<20,31>"], "code": ["case SQLTokenizer.TINYINT:return readUnsignedByte();case SQLTokenizer.SMALLINT:return readShort();case SQLTokenizer.INT:return readInt();"]},
{"name":"/src/smallsql/junit/TestFunctions.java", "imports":["/src/smallsql/junit/TestFunctions.java","/src/smallsql/junit/TestOperatoren.java"], "source": ["/src/smallsql/junit/TestFunctions.java<374,389>","/src/smallsql/junit/TestOperatoren.java<95,110>"], "code": ["case SQLTokenizer.TINYINT:return readUnsignedByte();case SQLTokenizer.SMALLINT:return readShort();case SQLTokenizer.INT:return readInt();"]},
{"name":"/src/smallsql/junit/TestJoins.java", "imports":["/src/smallsql/junit/TestJoins.java","/src/smallsql/junit/TestOperatoren.java"], "source": ["/src/smallsql/junit/TestJoins.java<129,155>","/src/smallsql/junit/TestOperatoren.java<115,141>"], "code": ["case SQLTokenizer.TIMESTAMP:return readTimestamp();case SQLTokenizer.TIME:return readTime();case SQLTokenizer.DATE:return readDate();"]},
{"name":"/src/smallsql/junit/TestJoins.java", "imports":["/src/smallsql/junit/TestJoins.java","/src/smallsql/junit/TestOperatoren.java"], "source": ["/src/smallsql/junit/TestJoins.java<204,216>","/src/smallsql/junit/TestOperatoren.java<267,279>"], "code": ["case SQLTokenizer.TINYINT:return readUnsignedByte();case SQLTokenizer.SMALLINT:return readShort();case SQLTokenizer.INT:return readInt();"]},
{"name":"/src/smallsql/junit/TestLanguage.java", "imports":["/src/smallsql/junit/TestLanguage.java","/src/smallsql/junit/TestLanguage.java"], "source": ["/src/smallsql/junit/TestLanguage.java<82,92>","/src/smallsql/junit/TestLanguage.java<101,112>"], "code": ["int valueOffsetint dataTypethis.offset = valueOffset;return 0;if(readBoolean()) return 0;case SQLTokenizer.BIT:"]},
{"name":"/src/smallsql/junit/TestOperatoren.java", "imports":["/src/smallsql/junit/TestOperatoren.java","/src/smallsql/junit/TestOperatoren.java"], "source": ["/src/smallsql/junit/TestOperatoren.java<209,218>","/src/smallsql/junit/TestOperatoren.java<230,239>"], "code": ["int valueOffsetint dataTypethis.offset = valueOffset;return null;if(readBoolean()) return null;case SQLTokenizer.BIT:"]},
{"name":"/src/smallsql/junit/TestOperatoren.java", "imports":["/src/smallsql/junit/TestOperatoren.java","/src/smallsql/junit/TestOperatoren.java"], "source": ["/src/smallsql/junit/TestOperatoren.java<221,227>","/src/smallsql/junit/TestOperatoren.java<242,248>"], "code": ["case SQLTokenizer.NUMERIC:case SQLTokenizer.DECIMAL:return readNumeric();case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:"]},
{"name":"/src/smallsql/junit/TestOrderBy.java", "imports":["/src/smallsql/junit/TestOrderBy.java","/src/smallsql/junit/TestOrderBy.java"], "source": ["/src/smallsql/junit/TestOrderBy.java<152,161>","/src/smallsql/junit/TestOrderBy.java<179,188>"], "code": ["case SQLTokenizer.CHAR:case SQLTokenizer.NCHAR:case SQLTokenizer.VARCHAR:case SQLTokenizer.NVARCHAR:return readString();case SQLTokenizer.CLOB:"]},
{"name":"/src/smallsql/junit/TestOrderBy.java", "imports":["/src/smallsql/junit/TestOrderBy.java","/src/smallsql/junit/TestOrderBy.java"], "source": ["/src/smallsql/junit/TestOrderBy.java<187,192>","/src/smallsql/junit/TestOrderBy.java<811,816>"], "code": ["int valueOffsetint dataTypethis.offset = valueOffset;return null;if(readBoolean()) return null;case SQLTokenizer.BIT:"]},
{"name":"/src/smallsql/junit/TestOrderBy.java", "imports":["/src/smallsql/junit/TestOrderBy.java","/src/smallsql/junit/TestOrderBy.java"], "source": ["/src/smallsql/junit/TestOrderBy.java<207,222>","/src/smallsql/junit/TestOrderBy.java<235,250>"], "code": ["case SQLTokenizer.INT:case SQLTokenizer.REAL:case SQLTokenizer.SMALLMONEY:case SQLTokenizer.TIME:case SQLTokenizer.DATE:case SQLTokenizer.SMALLDATETIME:"]},
{"name":"/src/smallsql/junit/TestOrderBy.java", "imports":["/src/smallsql/junit/TestOrderBy.java","/src/smallsql/junit/TestOrderBy.java"], "source": ["/src/smallsql/junit/TestOrderBy.java<338,351>","/src/smallsql/junit/TestOrderBy.java<423,436>"], "code": ["int[] offsetsint[] dataTypes{/* Empty because not supported for the most Commands */}void scanObjectOffsets(int[] offsets, int[] dataTypes) {  // TODO Auto-generated method stub }return 0;{                    return 0;                }"]},
{"name":"/src/smallsql/junit/TestOrderBy.java", "imports":["/src/smallsql/junit/TestOrderBy.java","/src/smallsql/junit/TestOrderBy.java"], "source": ["/src/smallsql/junit/TestOrderBy.java<707,725>","/src/smallsql/junit/TestOrderBy.java<738,756>"], "code": ["Iterator values = locks.values().iterator();TableStorePage lock = (TableStorePage)values.next();return null;if(lock.con != con) return null;{        TableStorePage lock = (TableStorePage)values.next();        if(lock.con != con) return null;       }while(values.hasNext()){        TableStorePage lock = (TableStorePage)values.next();        if(lock.con != con) return null;       }"]},
{"name":"/src/smallsql/junit/TestResultSet.java", "imports":["/src/smallsql/junit/TestResultSet.java","/src/smallsql/junit/TestStatement.java"], "source": ["/src/smallsql/junit/TestResultSet.java<34,51>","/src/smallsql/junit/TestStatement.java<34,51>"], "code": ["Iterator values = locks.values().iterator();TableStorePage lock = (TableStorePage)values.next();return null;if(lock.con != con) return null;{        TableStorePage lock = (TableStorePage)values.next();        if(lock.con != con) return null;       }while(values.hasNext()){        TableStorePage lock = (TableStorePage)values.next();        if(lock.con != con) return null;       }"]},
{"name":"/src/smallsql/junit/TestResultSet.java", "imports":["/src/smallsql/junit/TestResultSet.java","/src/smallsql/junit/TestResultSet.java"], "source": ["/src/smallsql/junit/TestResultSet.java<78,83>","/src/smallsql/junit/TestResultSet.java<121,126>"], "code": ["byte[] bytesStringBuffer buf = new StringBuffer(bytes.length << 1);buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );buf.append( digits[ (bytes[i]     ) & 0x0F ] );{            buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );            buf.append( digits[ (bytes[i]     ) & 0x0F ] );        }for(int i=0; i<bytes.length; i++){            buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );            buf.append( digits[ (bytes[i]     ) & 0x0F ] );        }"]},
{"name":"/src/smallsql/junit/TestResultSet.java", "imports":["/src/smallsql/junit/TestResultSet.java","/src/smallsql/junit/TestResultSet.java"], "source": ["/src/smallsql/junit/TestResultSet.java<85,107>","/src/smallsql/junit/TestResultSet.java<128,150>"], "code": ["String valreturn Double.parseDouble( val ) != 0;{            return Double.parseDouble( val ) != 0;        }NumberFormatException e{/* Empty because not supported for the most Commands */}catch(NumberFormatException e){/*ignore it if it not a number*/}"]},
{"name":"/src/smallsql/junit/TestScrollable.java", "imports":["/src/smallsql/junit/TestScrollable.java","/src/smallsql/junit/TestScrollable.java","/src/smallsql/junit/TestScrollable.java","/src/smallsql/junit/TestScrollable.java"], "source": ["/src/smallsql/junit/TestScrollable.java<44,53>","/src/smallsql/junit/TestScrollable.java<77,86>","/src/smallsql/junit/TestScrollable.java<109,118>","/src/smallsql/junit/TestScrollable.java<145,154>"], "code": ["int k=tmp.length-1;break;if(tmp[k] != 0) break;for(; k>= 0; k--) if(tmp[k] != 0) break;k++;byte[] tmp2 = new byte[k];"]},
{"name":"/src/smallsql/junit/TestScrollable.java", "imports":["/src/smallsql/junit/TestScrollable.java","/src/smallsql/junit/TestScrollable.java","/src/smallsql/junit/TestScrollable.java","/src/smallsql/junit/TestScrollable.java"], "source": ["/src/smallsql/junit/TestScrollable.java<67,72>","/src/smallsql/junit/TestScrollable.java<99,104>","/src/smallsql/junit/TestScrollable.java<135,140>","/src/smallsql/junit/TestScrollable.java<173,178>"], "code": ["rs.next();int count = rs.getInt(1);System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");System.out.println( \"  Test time: \" + time + \" ms\");if (count != rowCount)                System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");            else System.out.println( \"  Test time: \" + time + \" ms\");st.close();"]},
{"name":"/src/smallsql/junit/TestStatement.java", "imports":["/src/smallsql/junit/TestStatement.java","/src/smallsql/junit/TestStatement.java","/src/smallsql/junit/TestStatement.java"], "source": ["/src/smallsql/junit/TestStatement.java<268,273>","/src/smallsql/junit/TestStatement.java<283,288>","/src/smallsql/junit/TestStatement.java<298,303>"], "code": ["Exception eSystem.out.println(\"  Failed:\"+e);{            System.out.println(\"  Failed:\"+e);        }catch(Exception e){            System.out.println(\"  Failed:\"+e);        }System.out.println();System.out.println(\"===================================================================\");"]},
{"name":"/src/smallsql/junit/TestThreads.java", "imports":["/src/smallsql/junit/TestThreads.java","/src/smallsql/junit/TestThreads.java"], "source": ["/src/smallsql/junit/TestThreads.java<79,85>","/src/smallsql/junit/TestThreads.java<131,137>"], "code": ["Statement st1 = con.createStatement();ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);rs.next();int count = rs.getInt(1);createTestDataWithClassicInsert( con );rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);"]},
{"name":"/src/smallsql/junit/TestThreads.java", "imports":["/src/smallsql/junit/TestThreads.java","/src/smallsql/junit/TestThreads.java"], "source": ["/src/smallsql/junit/TestThreads.java<106,117>","/src/smallsql/junit/TestThreads.java<160,171>"], "code": ["PreparedStatement pr = con.prepareStatement( \"UPDATE \" + tableName + \" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\" );long time = -System.currentTimeMillis();pr.setBytes (  1, byteArray );pr.setString(  2 , \"Test\" );pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );pr.setFloat (  4, (float)1234.56789 );"]},
{"name":"/src/smallsql/junit/TestTransactions.java", "imports":["/src/smallsql/junit/TestTransactions.java","/src/smallsql/junit/TestTransactions.java","/src/smallsql/junit/TestTransactions.java","/src/smallsql/junit/TestTransactions.java","/src/smallsql/junit/TestTransactions.java","/src/smallsql/junit/TestTransactions.java"], "source": ["/src/smallsql/junit/TestTransactions.java<98,103>","/src/smallsql/junit/TestTransactions.java<129,134>","/src/smallsql/junit/TestTransactions.java<157,162>","/src/smallsql/junit/TestTransactions.java<188,193>","/src/smallsql/junit/TestTransactions.java<281,286>","/src/smallsql/junit/TestTransactions.java<365,370>"], "code": ["long time = -System.currentTimeMillis();pr.setBytes (  1, byteArray );pr.setString(  2 , \"Test\" );pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );pr.setFloat (  4, (float)1234.56789 );pr.setFloat (  5 , (float)9876.54321 );"]},
{"name":"/src/smallsql/junit/TestTransactions.java", "imports":["/src/smallsql/junit/TestTransactions.java","/src/smallsql/junit/TestTransactions.java"], "source": ["/src/smallsql/junit/TestTransactions.java<111,121>","/src/smallsql/junit/TestTransactions.java<170,180>"], "code": ["PreparedStatement pr = con.prepareStatement( \"UPDATE \" + tableName + \" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\" );long time = -System.currentTimeMillis();pr.setBytes (  1, byteArray );pr.setString(  2 , \"Test\" );pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );pr.setFloat (  4, (float)1234.56789 );"]},
{"name":"/src/smallsql/junit/TestTransactions.java", "imports":["/src/smallsql/junit/TestTransactions.java","/src/smallsql/junit/TestTransactions.java"], "source": ["/src/smallsql/junit/TestTransactions.java<223,227>","/src/smallsql/junit/TestTransactions.java<397,401>"], "code": ["pr.setDouble(  8 , 23.45 );pr.setDouble(  9 , 567.45 );pr.setFloat (  10 , (float)78.89 );pr.setTime  (  11, new Time( System.currentTimeMillis() ) );pr.setShort (  12, (short)23456 );pr.setFloat (  13, (float)34.56 );"]},
{"name":"/src/smallsql/junit/TestTransactions.java", "imports":["/src/smallsql/junit/TestTransactions.java","/src/smallsql/junit/TestTransactions.java"], "source": ["/src/smallsql/junit/TestTransactions.java<262,274>","/src/smallsql/junit/TestTransactions.java<305,317>"], "code": ["java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");byte bytes[] = new byte[1024];fos.write(bytes);{                fos.write(bytes);            }for(int i=0; i<rowCount; i++){                fos.write(bytes);            }fos.close();"]},
{"name":"/src/smallsql/junit/TestTransactions.java", "imports":["/src/smallsql/junit/TestTransactions.java","/src/smallsql/junit/TestTransactions.java"], "source": ["/src/smallsql/junit/TestTransactions.java<410,417>","/src/smallsql/junit/TestTransactions.java<432,439>"], "code": ["pr.close();time += System.currentTimeMillis();System.out.println( \"  Test time: \" + time + \" ms\");fis.close();java.io.File file = new java.io.File(tableName+\".bin\");file.delete();"]}]